library(bigreadr)

# Read the UK Biobank PC data (including `eid`)
PC_UKBB <- bigreadr::fread2(
  "/rds/project/rds-RtePkTecWB4/genetics/P7439/post_qc_data/imputed/reference_files/ukb_sqc_v2.txt",
  select = c("eid", "PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", 
             "PC9", "PC10", "PC11", "PC12", "PC13", "PC14", "PC15", "PC16")
)

# Debug: Check dimensions
print(dim(PC_UKBB))  # Should be (~488377, 17 including eid)

# Read ancestry reference centers
all_centers <- read.csv(
  "https://raw.githubusercontent.com/privefl/UKBB-PGS/main/pop_centers.csv",
  stringsAsFactors = FALSE
)

# Debug: Check structure
print(dim(all_centers))  # Expecting (X, 17) - one ancestry column + 16 PCs
print(colnames(all_centers))  # Verify PC column names

# Ensure `all_centers` has exactly 16 PC columns
if (ncol(all_centers) - 1 != 16) {
  stop("Error: Population centers must have exactly 16 PC columns!")
}

# Compute squared distances for ancestry classification
all_sq_dist <- apply(all_centers[-1], 1, function(one_center) {
  
  if (length(one_center) != ncol(PC_UKBB) - 1) {  # Subtract 1 because of "eid"
    stop("Dimension mismatch: one_center length != PC_UKBB column count (excluding eid)")
  }
  
  rowSums(sweep(PC_UKBB[,-1], 2, one_center, '-')^2)  # Exclude eid when computing distances
})

# Debug: Check `all_sq_dist`
print(dim(all_sq_dist))  # Should be (~488377, N_centers)

# Compute ancestry assignment
thr_sq_dist <- max(dist(all_centers[-1])^2) * 0.002 / 0.16

group <- apply(all_sq_dist, 1, function(x) {
  grp <- NA
  ind <- which.min(x)
  if (isTRUE(x[ind] < thr_sq_dist)) {
    grp <- all_centers$Ancestry[ind]
    # More stringent cutoff for Ashkenazi
    if (grp == "Ashkenazi" && x[ind] > 12.5^2) grp <- NA
  }
  grp
})

# Debug: Check ancestry assignments
print(table(group, exclude = NULL))

# Merge ancestry assignment with `eid`
PC_UKBB$Ancestry <- group

# Save structured output for downstream analysis
output_file <- "/rds/project/rds-RtePkTecWB4/projects/P7439/mphil/ris30/ancestry_assigned.tsv"
write.table(PC_UKBB, output_file, sep = "\t", quote = FALSE, row.names = FALSE)

print("Ancestry classification complete. Results saved with EID.")
 
